{
  "info" : {
    "_postman_id" : "d6e5e916-fa1d-49f8-bfb3-23ee37aeb1e2",
    "name" : "Banking App API Copy",
    "description" : "API pour la gestion des comptes bancaires et des transactions.",
    "schema" : "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id" : "36966437",
    "_collection_link" : "https://api555-1527.postman.co/workspace/test1~c7cda6ec-e028-429d-b5a9-8bd75f935b10/collection/36966437-d6e5e916-fa1d-49f8-bfb3-23ee37aeb1e2?action=share&source=collection_link&creator=36966437"
  },
  "item" : [ {
    "name" : "api",
    "item" : [ {
      "name" : "accounts",
      "item" : [ {
        "name" : "{id}",
        "item" : [ {
          "name" : "Récupérer un compte bancaire par son ID",
          "request" : {
            "method" : "GET",
            "header" : [ {
              "key" : "Accept",
              "value" : "application/json"
            } ],
            "url" : {
              "raw" : "{{baseUrl}}/api/accounts/3",
              "host" : [ "{{baseUrl}}" ],
              "path" : [ "api", "accounts", ":id" ],
              "variable" : [ {
                "key" : "id",
                "value" : "3",
                "description" : "(Required) L'ID du compte bancaire à récupérer"
              } ]
            }
          },
          "response" : [ {
            "name" : "Compte trouvé",
            "originalRequest" : {
              "method" : "GET",
              "header" : [ {
                "key" : "Accept",
                "value" : "application/json"
              } ],
              "url" : {
                "raw" : "{{baseUrl}}/api/accounts/:id",
                "host" : [ "{{baseUrl}}" ],
                "path" : [ "api", "accounts", ":id" ],
                "variable" : [ {
                  "key" : "id"
                } ]
              }
            },
            "status" : "OK",
            "code" : 200,
            "_postman_previewlanguage" : "json",
            "header" : [ {
              "key" : "Content-Type",
              "value" : "application/json"
            } ],
            "cookie" : [ ],
            "body" : "{\n  \"id\": \"<long>\",\n  \"nom\": \"<string>\",\n  \"prenom\": \"<string>\",\n  \"accountNumber\": \"<string>\",\n  \"total\": \"<number>\",\n  \"currency\": \"<string>\"\n}"
          }, {
            "name" : "Compte non trouvé",
            "originalRequest" : {
              "method" : "GET",
              "header" : [ {
                "key" : "Accept",
                "value" : "application/json"
              } ],
              "url" : {
                "raw" : "{{baseUrl}}/api/accounts/:id",
                "host" : [ "{{baseUrl}}" ],
                "path" : [ "api", "accounts", ":id" ],
                "variable" : [ {
                  "key" : "id"
                } ]
              }
            },
            "status" : "Not Found",
            "code" : 404,
            "_postman_previewlanguage" : "json",
            "header" : [ {
              "key" : "Content-Type",
              "value" : "application/json"
            } ],
            "cookie" : [ ],
            "body" : "{\n  \"timestamp\": \"<dateTime>\",\n  \"status\": \"<integer>\",\n  \"error\": \"<string>\",\n  \"path\": \"<string>\"\n}"
          } ],
          "event" : [ {
            "listen" : "test",
            "script" : {
              "type" : "text/javascript",
              "exec" : "pm.test(\"Vérification des réponses possibles\", function () {\n    pm.expect([200, 404]).to.include(pm.response.code);\n});\npm.test(\"Vérification du schéma de réponse pour le statut 404\", function () {\n    if (pm.response.code === 404) {\n        const jsonResponse = pm.response.json();\n        if (Array.isArray(jsonResponse)) {\n            pm.expect(jsonResponse).to.be.an('array').and.not.be.empty;\n            jsonResponse.forEach(function(item) {\n                pm.expect(item).to.have.property(\"timestamp\");\n                pm.expect(item).to.have.property(\"status\");\n                pm.expect(item).to.have.property(\"error\");\n                pm.expect(item).to.have.property(\"path\");\n            });\n        } else {\n            pm.expect(jsonResponse).to.have.property(\"timestamp\");\n            pm.expect(jsonResponse).to.have.property(\"status\");\n            pm.expect(jsonResponse).to.have.property(\"error\");\n            pm.expect(jsonResponse).to.have.property(\"path\");\n        }\n    }\n});\npm.test(\"Vérification du schéma de réponse pour le statut 200\", function () {\n    if (pm.response.code === 200) {\n        const jsonResponse = pm.response.json();\n        if (Array.isArray(jsonResponse)) {\n            pm.expect(jsonResponse).to.be.an('array').and.not.be.empty;\n            jsonResponse.forEach(function(item) {\n                pm.expect(item).to.have.property(\"id\");\n                pm.expect(item).to.have.property(\"nom\");\n                pm.expect(item).to.have.property(\"prenom\");\n                pm.expect(item).to.have.property(\"accountNumber\");\n                pm.expect(item).to.have.property(\"total\");\n                pm.expect(item).to.have.property(\"currency\");\n            });\n        } else {\n            pm.expect(jsonResponse).to.have.property(\"id\");\n            pm.expect(jsonResponse).to.have.property(\"nom\");\n            pm.expect(jsonResponse).to.have.property(\"prenom\");\n            pm.expect(jsonResponse).to.have.property(\"accountNumber\");\n            pm.expect(jsonResponse).to.have.property(\"total\");\n            pm.expect(jsonResponse).to.have.property(\"currency\");\n        }\n    }\n});\n"
            }
          } ]
        }, {
          "name" : "Mettre à jour un compte bancaire existant",
          "request" : {
            "method" : "PUT",
            "header" : [ {
              "key" : "Content-Type",
              "value" : "application/json"
            }, {
              "key" : "Accept",
              "value" : "application/json"
            } ],
            "body" : {
              "mode" : "raw",
              "raw" : "{\n  \"id\": 3,\n  \"nom\": \"TestString\",\n  \"prenom\": \"TestString\",\n  \"accountNumber\": \"TestString\",\n  \"total\": 100,\n  \"currency\": \"TestString\"\n}",
              "options" : {
                "raw" : {
                  "headerFamily" : "json",
                  "language" : "json"
                }
              }
            },
            "url" : {
              "raw" : "{{baseUrl}}/api/accounts/3",
              "host" : [ "{{baseUrl}}" ],
              "path" : [ "api", "accounts", ":id" ],
              "variable" : [ {
                "key" : "id",
                "value" : "3",
                "description" : "(Required) L'ID du compte bancaire à mettre à jour"
              } ]
            }
          },
          "response" : [ {
            "name" : "Compte mis à jour avec succès",
            "originalRequest" : {
              "method" : "PUT",
              "header" : [ {
                "key" : "Content-Type",
                "value" : "application/json"
              }, {
                "key" : "Accept",
                "value" : "application/json"
              } ],
              "body" : {
                "mode" : "raw",
                "raw" : "{\n  \"id\": \"<long>\",\n  \"nom\": \"<string>\",\n  \"prenom\": \"<string>\",\n  \"accountNumber\": \"<string>\",\n  \"total\": \"<number>\",\n  \"currency\": \"<string>\"\n}",
                "options" : {
                  "raw" : {
                    "headerFamily" : "json",
                    "language" : "json"
                  }
                }
              },
              "url" : {
                "raw" : "{{baseUrl}}/api/accounts/:id",
                "host" : [ "{{baseUrl}}" ],
                "path" : [ "api", "accounts", ":id" ],
                "variable" : [ {
                  "key" : "id"
                } ]
              }
            },
            "status" : "OK",
            "code" : 200,
            "_postman_previewlanguage" : "json",
            "header" : [ {
              "key" : "Content-Type",
              "value" : "application/json"
            } ],
            "cookie" : [ ],
            "body" : "{\n  \"id\": \"<long>\",\n  \"nom\": \"<string>\",\n  \"prenom\": \"<string>\",\n  \"accountNumber\": \"<string>\",\n  \"total\": \"<number>\",\n  \"currency\": \"<string>\"\n}"
          }, {
            "name" : "Compte non trouvé",
            "originalRequest" : {
              "method" : "PUT",
              "header" : [ {
                "key" : "Content-Type",
                "value" : "application/json"
              }, {
                "key" : "Accept",
                "value" : "application/json"
              } ],
              "body" : {
                "mode" : "raw",
                "raw" : "{\n  \"id\": \"<long>\",\n  \"nom\": \"<string>\",\n  \"prenom\": \"<string>\",\n  \"accountNumber\": \"<string>\",\n  \"total\": \"<number>\",\n  \"currency\": \"<string>\"\n}",
                "options" : {
                  "raw" : {
                    "headerFamily" : "json",
                    "language" : "json"
                  }
                }
              },
              "url" : {
                "raw" : "{{baseUrl}}/api/accounts/:id",
                "host" : [ "{{baseUrl}}" ],
                "path" : [ "api", "accounts", ":id" ],
                "variable" : [ {
                  "key" : "id"
                } ]
              }
            },
            "status" : "Not Found",
            "code" : 404,
            "_postman_previewlanguage" : "json",
            "header" : [ {
              "key" : "Content-Type",
              "value" : "application/json"
            } ],
            "cookie" : [ ],
            "body" : "{\n  \"timestamp\": \"<dateTime>\",\n  \"status\": \"<integer>\",\n  \"error\": \"<string>\",\n  \"path\": \"<string>\"\n}"
          } ],
          "event" : [ {
            "listen" : "test",
            "script" : {
              "type" : "text/javascript",
              "exec" : "pm.test(\"Vérification des réponses possibles\", function () {\n    pm.expect([200, 404]).to.include(pm.response.code);\n});\npm.test(\"Vérification du schéma de réponse pour le statut 404\", function () {\n    if (pm.response.code === 404) {\n        const jsonResponse = pm.response.json();\n        if (Array.isArray(jsonResponse)) {\n            pm.expect(jsonResponse).to.be.an('array').and.not.be.empty;\n            jsonResponse.forEach(function(item) {\n                pm.expect(item).to.have.property(\"timestamp\");\n                pm.expect(item).to.have.property(\"status\");\n                pm.expect(item).to.have.property(\"error\");\n                pm.expect(item).to.have.property(\"path\");\n            });\n        } else {\n            pm.expect(jsonResponse).to.have.property(\"timestamp\");\n            pm.expect(jsonResponse).to.have.property(\"status\");\n            pm.expect(jsonResponse).to.have.property(\"error\");\n            pm.expect(jsonResponse).to.have.property(\"path\");\n        }\n    }\n});\npm.test(\"Vérification du schéma de réponse pour le statut 200\", function () {\n    if (pm.response.code === 200) {\n        const jsonResponse = pm.response.json();\n        if (Array.isArray(jsonResponse)) {\n            pm.expect(jsonResponse).to.be.an('array').and.not.be.empty;\n            jsonResponse.forEach(function(item) {\n                pm.expect(item).to.have.property(\"id\");\n                pm.expect(item).to.have.property(\"nom\");\n                pm.expect(item).to.have.property(\"prenom\");\n                pm.expect(item).to.have.property(\"accountNumber\");\n                pm.expect(item).to.have.property(\"total\");\n                pm.expect(item).to.have.property(\"currency\");\n            });\n        } else {\n            pm.expect(jsonResponse).to.have.property(\"id\");\n            pm.expect(jsonResponse).to.have.property(\"nom\");\n            pm.expect(jsonResponse).to.have.property(\"prenom\");\n            pm.expect(jsonResponse).to.have.property(\"accountNumber\");\n            pm.expect(jsonResponse).to.have.property(\"total\");\n            pm.expect(jsonResponse).to.have.property(\"currency\");\n        }\n    }\n});\n"
            }
          } ]
        }, {
          "name" : "Supprimer un compte bancaire",
          "request" : {
            "method" : "DELETE",
            "header" : [ {
              "key" : "Accept",
              "value" : "application/json"
            } ],
            "url" : {
              "raw" : "{{baseUrl}}/api/accounts/4",
              "host" : [ "{{baseUrl}}" ],
              "path" : [ "api", "accounts", ":id" ],
              "variable" : [ {
                "key" : "id",
                "value" : "4",
                "description" : "(Required) L'ID du compte bancaire à supprimer"
              } ]
            }
          },
          "response" : [ {
            "name" : "Compte non trouvé",
            "originalRequest" : {
              "method" : "DELETE",
              "header" : [ {
                "key" : "Accept",
                "value" : "application/json"
              } ],
              "url" : {
                "raw" : "{{baseUrl}}/api/accounts/:id",
                "host" : [ "{{baseUrl}}" ],
                "path" : [ "api", "accounts", ":id" ],
                "variable" : [ {
                  "key" : "id"
                } ]
              }
            },
            "status" : "Not Found",
            "code" : 404,
            "_postman_previewlanguage" : "json",
            "header" : [ {
              "key" : "Content-Type",
              "value" : "application/json"
            } ],
            "cookie" : [ ],
            "body" : "{\n  \"timestamp\": \"<dateTime>\",\n  \"status\": \"<integer>\",\n  \"error\": \"<string>\",\n  \"path\": \"<string>\"\n}"
          } ]
        } ]
      }, {
        "name" : "Récupérer tous les comptes bancaires",
        "request" : {
          "method" : "GET",
          "header" : [ {
            "key" : "Accept",
            "value" : "application/json"
          } ],
          "url" : {
            "raw" : "{{baseUrl}}/api/accounts",
            "host" : [ "{{baseUrl}}" ],
            "path" : [ "api", "accounts" ]
          }
        },
        "response" : [ {
          "name" : "Opération réussie",
          "originalRequest" : {
            "method" : "GET",
            "header" : [ {
              "key" : "Accept",
              "value" : "application/json"
            } ],
            "url" : {
              "raw" : "{{baseUrl}}/api/accounts",
              "host" : [ "{{baseUrl}}" ],
              "path" : [ "api", "accounts" ]
            }
          },
          "status" : "OK",
          "code" : 200,
          "_postman_previewlanguage" : "json",
          "header" : [ {
            "key" : "Content-Type",
            "value" : "application/json"
          } ],
          "cookie" : [ ],
          "body" : "{\n  \"id\": \"<long>\",\n  \"nom\": \"<string>\",\n  \"prenom\": \"<string>\",\n  \"accountNumber\": \"<string>\",\n  \"total\": \"<number>\",\n  \"currency\": \"<string>\"\n}"
        }, {
          "name" : "Requête invalide",
          "originalRequest" : {
            "method" : "GET",
            "header" : [ {
              "key" : "Accept",
              "value" : "application/json"
            } ],
            "url" : {
              "raw" : "{{baseUrl}}/api/accounts",
              "host" : [ "{{baseUrl}}" ],
              "path" : [ "api", "accounts" ]
            }
          },
          "status" : "Bad Request",
          "code" : 400,
          "_postman_previewlanguage" : "json",
          "header" : [ {
            "key" : "Content-Type",
            "value" : "application/json"
          } ],
          "cookie" : [ ],
          "body" : "{\n  \"timestamp\": \"<dateTime>\",\n  \"status\": \"<integer>\",\n  \"error\": \"<string>\",\n  \"path\": \"<string>\"\n}"
        } ],
        "event" : [ {
          "listen" : "test",
          "script" : {
            "type" : "text/javascript",
            "exec" : "pm.test(\"Vérification des réponses possibles\", function () {\n    pm.expect([200, 400]).to.include(pm.response.code);\n});\npm.test(\"Vérification du schéma de réponse pour le statut 400\", function () {\n    if (pm.response.code === 400) {\n        const jsonResponse = pm.response.json();\n        if (Array.isArray(jsonResponse)) {\n            pm.expect(jsonResponse).to.be.an('array').and.not.be.empty;\n            jsonResponse.forEach(function(item) {\n                pm.expect(item).to.have.property(\"timestamp\");\n                pm.expect(item).to.have.property(\"status\");\n                pm.expect(item).to.have.property(\"error\");\n                pm.expect(item).to.have.property(\"path\");\n            });\n        } else {\n            pm.expect(jsonResponse).to.have.property(\"timestamp\");\n            pm.expect(jsonResponse).to.have.property(\"status\");\n            pm.expect(jsonResponse).to.have.property(\"error\");\n            pm.expect(jsonResponse).to.have.property(\"path\");\n        }\n    }\n});\npm.test(\"Vérification du schéma de réponse pour le statut 200\", function () {\n    if (pm.response.code === 200) {\n        const jsonResponse = pm.response.json();\n        if (Array.isArray(jsonResponse)) {\n            pm.expect(jsonResponse).to.be.an('array').and.not.be.empty;\n            jsonResponse.forEach(function(item) {\n                pm.expect(item).to.have.property(\"id\");\n                pm.expect(item).to.have.property(\"nom\");\n                pm.expect(item).to.have.property(\"prenom\");\n                pm.expect(item).to.have.property(\"accountNumber\");\n                pm.expect(item).to.have.property(\"total\");\n                pm.expect(item).to.have.property(\"currency\");\n            });\n        } else {\n            pm.expect(jsonResponse).to.have.property(\"id\");\n            pm.expect(jsonResponse).to.have.property(\"nom\");\n            pm.expect(jsonResponse).to.have.property(\"prenom\");\n            pm.expect(jsonResponse).to.have.property(\"accountNumber\");\n            pm.expect(jsonResponse).to.have.property(\"total\");\n            pm.expect(jsonResponse).to.have.property(\"currency\");\n        }\n    }\n});\n"
          }
        } ]
      }, {
        "name" : "Créer un nouveau compte bancaire",
        "request" : {
          "method" : "POST",
          "header" : [ {
            "key" : "Content-Type",
            "value" : "application/json"
          }, {
            "key" : "Accept",
            "value" : "application/json"
          } ],
          "body" : {
            "mode" : "raw",
            "raw" : "{\n  \"id\": 3,\n  \"nom\": \"TestString\",\n  \"prenom\": \"TestString\",\n  \"accountNumber\": \"TestString\",\n  \"total\": 100,\n  \"currency\": \"TestString\"\n}",
            "options" : {
              "raw" : {
                "headerFamily" : "json",
                "language" : "json"
              }
            }
          },
          "url" : {
            "raw" : "{{baseUrl}}/api/accounts",
            "host" : [ "{{baseUrl}}" ],
            "path" : [ "api", "accounts" ]
          }
        },
        "response" : [ {
          "name" : "Compte créé avec succès",
          "originalRequest" : {
            "method" : "POST",
            "header" : [ {
              "key" : "Content-Type",
              "value" : "application/json"
            }, {
              "key" : "Accept",
              "value" : "application/json"
            } ],
            "body" : {
              "mode" : "raw",
              "raw" : "{\n  \"id\": \"<long>\",\n  \"nom\": \"<string>\",\n  \"prenom\": \"<string>\",\n  \"accountNumber\": \"<string>\",\n  \"total\": \"<number>\",\n  \"currency\": \"<string>\"\n}",
              "options" : {
                "raw" : {
                  "headerFamily" : "json",
                  "language" : "json"
                }
              }
            },
            "url" : {
              "raw" : "{{baseUrl}}/api/accounts",
              "host" : [ "{{baseUrl}}" ],
              "path" : [ "api", "accounts" ]
            }
          },
          "status" : "Created",
          "code" : 201,
          "_postman_previewlanguage" : "json",
          "header" : [ {
            "key" : "Content-Type",
            "value" : "application/json"
          } ],
          "cookie" : [ ],
          "body" : "{\n  \"id\": \"<long>\",\n  \"nom\": \"<string>\",\n  \"prenom\": \"<string>\",\n  \"accountNumber\": \"<string>\",\n  \"total\": \"<number>\",\n  \"currency\": \"<string>\"\n}"
        }, {
          "name" : "Requête invalide",
          "originalRequest" : {
            "method" : "POST",
            "header" : [ {
              "key" : "Content-Type",
              "value" : "application/json"
            }, {
              "key" : "Accept",
              "value" : "application/json"
            } ],
            "body" : {
              "mode" : "raw",
              "raw" : "{\n  \"id\": \"<long>\",\n  \"nom\": \"<string>\",\n  \"prenom\": \"<string>\",\n  \"accountNumber\": \"<string>\",\n  \"total\": \"<number>\",\n  \"currency\": \"<string>\"\n}",
              "options" : {
                "raw" : {
                  "headerFamily" : "json",
                  "language" : "json"
                }
              }
            },
            "url" : {
              "raw" : "{{baseUrl}}/api/accounts",
              "host" : [ "{{baseUrl}}" ],
              "path" : [ "api", "accounts" ]
            }
          },
          "status" : "Bad Request",
          "code" : 400,
          "_postman_previewlanguage" : "json",
          "header" : [ {
            "key" : "Content-Type",
            "value" : "application/json"
          } ],
          "cookie" : [ ],
          "body" : "{\n  \"timestamp\": \"<dateTime>\",\n  \"status\": \"<integer>\",\n  \"error\": \"<string>\",\n  \"path\": \"<string>\"\n}"
        } ],
        "event" : [ {
          "listen" : "test",
          "script" : {
            "type" : "text/javascript",
            "exec" : "pm.test(\"Vérification des réponses possibles\", function () {\n    pm.expect([201, 400]).to.include(pm.response.code);\n});\npm.test(\"Vérification du schéma de réponse pour le statut 400\", function () {\n    if (pm.response.code === 400) {\n        const jsonResponse = pm.response.json();\n        if (Array.isArray(jsonResponse)) {\n            pm.expect(jsonResponse).to.be.an('array').and.not.be.empty;\n            jsonResponse.forEach(function(item) {\n                pm.expect(item).to.have.property(\"timestamp\");\n                pm.expect(item).to.have.property(\"status\");\n                pm.expect(item).to.have.property(\"error\");\n                pm.expect(item).to.have.property(\"path\");\n            });\n        } else {\n            pm.expect(jsonResponse).to.have.property(\"timestamp\");\n            pm.expect(jsonResponse).to.have.property(\"status\");\n            pm.expect(jsonResponse).to.have.property(\"error\");\n            pm.expect(jsonResponse).to.have.property(\"path\");\n        }\n    }\n});\npm.test(\"Vérification du schéma de réponse pour le statut 201\", function () {\n    if (pm.response.code === 201) {\n        const jsonResponse = pm.response.json();\n        if (Array.isArray(jsonResponse)) {\n            pm.expect(jsonResponse).to.be.an('array').and.not.be.empty;\n            jsonResponse.forEach(function(item) {\n                pm.expect(item).to.have.property(\"id\");\n                pm.expect(item).to.have.property(\"nom\");\n                pm.expect(item).to.have.property(\"prenom\");\n                pm.expect(item).to.have.property(\"accountNumber\");\n                pm.expect(item).to.have.property(\"total\");\n                pm.expect(item).to.have.property(\"currency\");\n            });\n        } else {\n            pm.expect(jsonResponse).to.have.property(\"id\");\n            pm.expect(jsonResponse).to.have.property(\"nom\");\n            pm.expect(jsonResponse).to.have.property(\"prenom\");\n            pm.expect(jsonResponse).to.have.property(\"accountNumber\");\n            pm.expect(jsonResponse).to.have.property(\"total\");\n            pm.expect(jsonResponse).to.have.property(\"currency\");\n        }\n    }\n});\n"
          }
        } ]
      } ]
    }, {
      "name" : "transactions",
      "item" : [ {
        "name" : "accounts",
        "item" : [ {
          "name" : "{accountId}",
          "item" : [ {
            "name" : "Créer une nouvelle transaction pour un compte spécifique",
            "request" : {
              "method" : "POST",
              "header" : [ {
                "key" : "Content-Type",
                "value" : "application/json"
              }, {
                "key" : "Accept",
                "value" : "application/json"
              } ],
              "body" : {
                "mode" : "raw",
                "raw" : "{\n  \"id\": 3,\n  \"account\": {\n    \"id\": 3,\n    \"nom\": \"TestString\",\n    \"prenom\": \"TestString\",\n    \"accountNumber\": \"TestString\",\n    \"total\": 100,\n    \"currency\": \"TestString\"\n  },\n  \"dateTransaction\": \"2023-10-01T00:00:00Z\",\n  \"montant\": 100,\n  \"type\": \"TestString\",\n  \"description\": \"TestString\"\n}",
                "options" : {
                  "raw" : {
                    "headerFamily" : "json",
                    "language" : "json"
                  }
                }
              },
              "url" : {
                "raw" : "{{baseUrl}}/api/transactions/accounts/3",
                "host" : [ "{{baseUrl}}" ],
                "path" : [ "api", "transactions", "accounts", ":accountId" ],
                "variable" : [ {
                  "key" : "accountId",
                  "value" : "3",
                  "description" : "(Required) L'ID du compte pour lequel la transaction est effectuée"
                } ]
              }
            },
            "response" : [ {
              "name" : "Transaction créée avec succès",
              "originalRequest" : {
                "method" : "POST",
                "header" : [ {
                  "key" : "Content-Type",
                  "value" : "application/json"
                }, {
                  "key" : "Accept",
                  "value" : "application/json"
                } ],
                "body" : {
                  "mode" : "raw",
                  "raw" : "{\n  \"id\": \"<long>\",\n  \"account\": {\n    \"id\": \"<long>\",\n    \"nom\": \"<string>\",\n    \"prenom\": \"<string>\",\n    \"accountNumber\": \"<string>\",\n    \"total\": \"<number>\",\n    \"currency\": \"<string>\"\n  },\n  \"dateTransaction\": \"<dateTime>\",\n  \"montant\": \"<number>\",\n  \"type\": \"<string>\",\n  \"description\": \"<string>\"\n}",
                  "options" : {
                    "raw" : {
                      "headerFamily" : "json",
                      "language" : "json"
                    }
                  }
                },
                "url" : {
                  "raw" : "{{baseUrl}}/api/transactions/accounts/:accountId",
                  "host" : [ "{{baseUrl}}" ],
                  "path" : [ "api", "transactions", "accounts", ":accountId" ],
                  "variable" : [ {
                    "key" : "accountId"
                  } ]
                }
              },
              "status" : "Created",
              "code" : 201,
              "_postman_previewlanguage" : "json",
              "header" : [ {
                "key" : "Content-Type",
                "value" : "application/json"
              } ],
              "cookie" : [ ],
              "body" : "{\n  \"id\": \"<long>\",\n  \"account\": {\n    \"id\": \"<long>\",\n    \"nom\": \"<string>\",\n    \"prenom\": \"<string>\",\n    \"accountNumber\": \"<string>\",\n    \"total\": \"<number>\",\n    \"currency\": \"<string>\"\n  },\n  \"dateTransaction\": \"<dateTime>\",\n  \"montant\": \"<number>\",\n  \"type\": \"<string>\",\n  \"description\": \"<string>\"\n}"
            }, {
              "name" : "Requête incorrecte",
              "originalRequest" : {
                "method" : "POST",
                "header" : [ {
                  "key" : "Content-Type",
                  "value" : "application/json"
                }, {
                  "key" : "Accept",
                  "value" : "application/json"
                } ],
                "body" : {
                  "mode" : "raw",
                  "raw" : "{\n  \"id\": \"<long>\",\n  \"account\": {\n    \"id\": \"<long>\",\n    \"nom\": \"<string>\",\n    \"prenom\": \"<string>\",\n    \"accountNumber\": \"<string>\",\n    \"total\": \"<number>\",\n    \"currency\": \"<string>\"\n  },\n  \"dateTransaction\": \"<dateTime>\",\n  \"montant\": \"<number>\",\n  \"type\": \"<string>\",\n  \"description\": \"<string>\"\n}",
                  "options" : {
                    "raw" : {
                      "headerFamily" : "json",
                      "language" : "json"
                    }
                  }
                },
                "url" : {
                  "raw" : "{{baseUrl}}/api/transactions/accounts/:accountId",
                  "host" : [ "{{baseUrl}}" ],
                  "path" : [ "api", "transactions", "accounts", ":accountId" ],
                  "variable" : [ {
                    "key" : "accountId"
                  } ]
                }
              },
              "status" : "Bad Request",
              "code" : 400,
              "_postman_previewlanguage" : "json",
              "header" : [ {
                "key" : "Content-Type",
                "value" : "application/json"
              } ],
              "cookie" : [ ],
              "body" : "{\n  \"timestamp\": \"<dateTime>\",\n  \"status\": \"<integer>\",\n  \"error\": \"<string>\",\n  \"path\": \"<string>\"\n}"
            } ],
            "event" : [ {
              "listen" : "test",
              "script" : {
                "type" : "text/javascript",
                "exec" : "pm.test(\"Vérification des réponses possibles\", function () {\n    pm.expect([201, 400]).to.include(pm.response.code);\n});\npm.test(\"Vérification du schéma de réponse pour le statut 400\", function () {\n    if (pm.response.code === 400) {\n        const jsonResponse = pm.response.json();\n        if (Array.isArray(jsonResponse)) {\n            pm.expect(jsonResponse).to.be.an('array').and.not.be.empty;\n            jsonResponse.forEach(function(item) {\n                pm.expect(item).to.have.property(\"timestamp\");\n                pm.expect(item).to.have.property(\"status\");\n                pm.expect(item).to.have.property(\"error\");\n                pm.expect(item).to.have.property(\"path\");\n            });\n        } else {\n            pm.expect(jsonResponse).to.have.property(\"timestamp\");\n            pm.expect(jsonResponse).to.have.property(\"status\");\n            pm.expect(jsonResponse).to.have.property(\"error\");\n            pm.expect(jsonResponse).to.have.property(\"path\");\n        }\n    }\n});\npm.test(\"Vérification du schéma de réponse pour le statut 201\", function () {\n    if (pm.response.code === 201) {\n        const jsonResponse = pm.response.json();\n        if (Array.isArray(jsonResponse)) {\n            pm.expect(jsonResponse).to.be.an('array').and.not.be.empty;\n            jsonResponse.forEach(function(item) {\n                pm.expect(item).to.have.property(\"id\");\n                pm.expect(item).to.have.property(\"account\");\n                pm.expect(item).to.have.property(\"dateTransaction\");\n                pm.expect(item).to.have.property(\"montant\");\n                pm.expect(item).to.have.property(\"type\");\n                pm.expect(item).to.have.property(\"description\");\n            });\n        } else {\n            pm.expect(jsonResponse).to.have.property(\"id\");\n            pm.expect(jsonResponse).to.have.property(\"account\");\n            pm.expect(jsonResponse).to.have.property(\"dateTransaction\");\n            pm.expect(jsonResponse).to.have.property(\"montant\");\n            pm.expect(jsonResponse).to.have.property(\"type\");\n            pm.expect(jsonResponse).to.have.property(\"description\");\n        }\n    }\n});\n"
              }
            } ]
          } ]
        } ]
      }, {
        "name" : "{id}",
        "item" : [ {
          "name" : "Récupérer une transaction par son ID",
          "request" : {
            "method" : "GET",
            "header" : [ {
              "key" : "Accept",
              "value" : "application/json"
            } ],
            "url" : {
              "raw" : "{{baseUrl}}/api/transactions/3",
              "host" : [ "{{baseUrl}}" ],
              "path" : [ "api", "transactions", ":id" ],
              "variable" : [ {
                "key" : "id",
                "value" : "3",
                "description" : "(Required) L'ID de la transaction à récupérer"
              } ]
            }
          },
          "response" : [ {
            "name" : "Opération réussie",
            "originalRequest" : {
              "method" : "GET",
              "header" : [ {
                "key" : "Accept",
                "value" : "application/json"
              } ],
              "url" : {
                "raw" : "{{baseUrl}}/api/transactions/:id",
                "host" : [ "{{baseUrl}}" ],
                "path" : [ "api", "transactions", ":id" ],
                "variable" : [ {
                  "key" : "id"
                } ]
              }
            },
            "status" : "OK",
            "code" : 200,
            "_postman_previewlanguage" : "json",
            "header" : [ {
              "key" : "Content-Type",
              "value" : "application/json"
            } ],
            "cookie" : [ ],
            "body" : "{\n  \"id\": \"<long>\",\n  \"account\": {\n    \"id\": \"<long>\",\n    \"nom\": \"<string>\",\n    \"prenom\": \"<string>\",\n    \"accountNumber\": \"<string>\",\n    \"total\": \"<number>\",\n    \"currency\": \"<string>\"\n  },\n  \"dateTransaction\": \"<dateTime>\",\n  \"montant\": \"<number>\",\n  \"type\": \"<string>\",\n  \"description\": \"<string>\"\n}"
          }, {
            "name" : "Transaction non trouvée",
            "originalRequest" : {
              "method" : "GET",
              "header" : [ {
                "key" : "Accept",
                "value" : "application/json"
              } ],
              "url" : {
                "raw" : "{{baseUrl}}/api/transactions/:id",
                "host" : [ "{{baseUrl}}" ],
                "path" : [ "api", "transactions", ":id" ],
                "variable" : [ {
                  "key" : "id"
                } ]
              }
            },
            "status" : "Not Found",
            "code" : 404,
            "_postman_previewlanguage" : "json",
            "header" : [ {
              "key" : "Content-Type",
              "value" : "application/json"
            } ],
            "cookie" : [ ],
            "body" : "{\n  \"timestamp\": \"<dateTime>\",\n  \"status\": \"<integer>\",\n  \"error\": \"<string>\",\n  \"path\": \"<string>\"\n}"
          } ],
          "event" : [ {
            "listen" : "test",
            "script" : {
              "type" : "text/javascript",
              "exec" : "pm.test(\"Vérification des réponses possibles\", function () {\n    pm.expect([200, 404]).to.include(pm.response.code);\n});\npm.test(\"Vérification du schéma de réponse pour le statut 404\", function () {\n    if (pm.response.code === 404) {\n        const jsonResponse = pm.response.json();\n        if (Array.isArray(jsonResponse)) {\n            pm.expect(jsonResponse).to.be.an('array').and.not.be.empty;\n            jsonResponse.forEach(function(item) {\n                pm.expect(item).to.have.property(\"timestamp\");\n                pm.expect(item).to.have.property(\"status\");\n                pm.expect(item).to.have.property(\"error\");\n                pm.expect(item).to.have.property(\"path\");\n            });\n        } else {\n            pm.expect(jsonResponse).to.have.property(\"timestamp\");\n            pm.expect(jsonResponse).to.have.property(\"status\");\n            pm.expect(jsonResponse).to.have.property(\"error\");\n            pm.expect(jsonResponse).to.have.property(\"path\");\n        }\n    }\n});\npm.test(\"Vérification du schéma de réponse pour le statut 200\", function () {\n    if (pm.response.code === 200) {\n        const jsonResponse = pm.response.json();\n        if (Array.isArray(jsonResponse)) {\n            pm.expect(jsonResponse).to.be.an('array').and.not.be.empty;\n            jsonResponse.forEach(function(item) {\n                pm.expect(item).to.have.property(\"id\");\n                pm.expect(item).to.have.property(\"account\");\n                pm.expect(item).to.have.property(\"dateTransaction\");\n                pm.expect(item).to.have.property(\"montant\");\n                pm.expect(item).to.have.property(\"type\");\n                pm.expect(item).to.have.property(\"description\");\n            });\n        } else {\n            pm.expect(jsonResponse).to.have.property(\"id\");\n            pm.expect(jsonResponse).to.have.property(\"account\");\n            pm.expect(jsonResponse).to.have.property(\"dateTransaction\");\n            pm.expect(jsonResponse).to.have.property(\"montant\");\n            pm.expect(jsonResponse).to.have.property(\"type\");\n            pm.expect(jsonResponse).to.have.property(\"description\");\n        }\n    }\n});\n"
            }
          } ]
        }, {
          "name" : "Supprimer une transaction",
          "request" : {
            "method" : "DELETE",
            "header" : [ {
              "key" : "Accept",
              "value" : "application/json"
            } ],
            "url" : {
              "raw" : "{{baseUrl}}/api/transactions/4",
              "host" : [ "{{baseUrl}}" ],
              "path" : [ "api", "transactions", ":id" ],
              "variable" : [ {
                "key" : "id",
                "value" : "4",
                "description" : "(Required) L'ID de la transaction à supprimer"
              } ]
            }
          },
          "response" : [ {
            "name" : "Transaction non trouvée",
            "originalRequest" : {
              "method" : "DELETE",
              "header" : [ {
                "key" : "Accept",
                "value" : "application/json"
              } ],
              "url" : {
                "raw" : "{{baseUrl}}/api/transactions/:id",
                "host" : [ "{{baseUrl}}" ],
                "path" : [ "api", "transactions", ":id" ],
                "variable" : [ {
                  "key" : "id"
                } ]
              }
            },
            "status" : "Not Found",
            "code" : 404,
            "_postman_previewlanguage" : "json",
            "header" : [ {
              "key" : "Content-Type",
              "value" : "application/json"
            } ],
            "cookie" : [ ],
            "body" : "{\n  \"timestamp\": \"<dateTime>\",\n  \"status\": \"<integer>\",\n  \"error\": \"<string>\",\n  \"path\": \"<string>\"\n}"
          } ]
        } ]
      }, {
        "name" : "Récupérer toutes les transactions",
        "request" : {
          "method" : "GET",
          "header" : [ {
            "key" : "Accept",
            "value" : "application/json"
          } ],
          "url" : {
            "raw" : "{{baseUrl}}/api/transactions",
            "host" : [ "{{baseUrl}}" ],
            "path" : [ "api", "transactions" ]
          }
        },
        "response" : [ {
          "name" : "Opération réussie",
          "originalRequest" : {
            "method" : "GET",
            "header" : [ {
              "key" : "Accept",
              "value" : "application/json"
            } ],
            "url" : {
              "raw" : "{{baseUrl}}/api/transactions",
              "host" : [ "{{baseUrl}}" ],
              "path" : [ "api", "transactions" ]
            }
          },
          "status" : "OK",
          "code" : 200,
          "_postman_previewlanguage" : "json",
          "header" : [ {
            "key" : "Content-Type",
            "value" : "application/json"
          } ],
          "cookie" : [ ],
          "body" : "{\n  \"id\": \"<long>\",\n  \"account\": {\n    \"id\": \"<long>\",\n    \"nom\": \"<string>\",\n    \"prenom\": \"<string>\",\n    \"accountNumber\": \"<string>\",\n    \"total\": \"<number>\",\n    \"currency\": \"<string>\"\n  },\n  \"dateTransaction\": \"<dateTime>\",\n  \"montant\": \"<number>\",\n  \"type\": \"<string>\",\n  \"description\": \"<string>\"\n}"
        }, {
          "name" : "Requête invalide",
          "originalRequest" : {
            "method" : "GET",
            "header" : [ {
              "key" : "Accept",
              "value" : "application/json"
            } ],
            "url" : {
              "raw" : "{{baseUrl}}/api/transactions",
              "host" : [ "{{baseUrl}}" ],
              "path" : [ "api", "transactions" ]
            }
          },
          "status" : "Bad Request",
          "code" : 400,
          "_postman_previewlanguage" : "json",
          "header" : [ {
            "key" : "Content-Type",
            "value" : "application/json"
          } ],
          "cookie" : [ ],
          "body" : "{\n  \"timestamp\": \"<dateTime>\",\n  \"status\": \"<integer>\",\n  \"error\": \"<string>\",\n  \"path\": \"<string>\"\n}"
        } ],
        "event" : [ {
          "listen" : "test",
          "script" : {
            "type" : "text/javascript",
            "exec" : "pm.test(\"Vérification des réponses possibles\", function () {\n    pm.expect([200, 400]).to.include(pm.response.code);\n});\npm.test(\"Vérification du schéma de réponse pour le statut 400\", function () {\n    if (pm.response.code === 400) {\n        const jsonResponse = pm.response.json();\n        if (Array.isArray(jsonResponse)) {\n            pm.expect(jsonResponse).to.be.an('array').and.not.be.empty;\n            jsonResponse.forEach(function(item) {\n                pm.expect(item).to.have.property(\"timestamp\");\n                pm.expect(item).to.have.property(\"status\");\n                pm.expect(item).to.have.property(\"error\");\n                pm.expect(item).to.have.property(\"path\");\n            });\n        } else {\n            pm.expect(jsonResponse).to.have.property(\"timestamp\");\n            pm.expect(jsonResponse).to.have.property(\"status\");\n            pm.expect(jsonResponse).to.have.property(\"error\");\n            pm.expect(jsonResponse).to.have.property(\"path\");\n        }\n    }\n});\npm.test(\"Vérification du schéma de réponse pour le statut 200\", function () {\n    if (pm.response.code === 200) {\n        const jsonResponse = pm.response.json();\n        if (Array.isArray(jsonResponse)) {\n            pm.expect(jsonResponse).to.be.an('array').and.not.be.empty;\n            jsonResponse.forEach(function(item) {\n                pm.expect(item).to.have.property(\"id\");\n                pm.expect(item).to.have.property(\"account\");\n                pm.expect(item).to.have.property(\"dateTransaction\");\n                pm.expect(item).to.have.property(\"montant\");\n                pm.expect(item).to.have.property(\"type\");\n                pm.expect(item).to.have.property(\"description\");\n            });\n        } else {\n            pm.expect(jsonResponse).to.have.property(\"id\");\n            pm.expect(jsonResponse).to.have.property(\"account\");\n            pm.expect(jsonResponse).to.have.property(\"dateTransaction\");\n            pm.expect(jsonResponse).to.have.property(\"montant\");\n            pm.expect(jsonResponse).to.have.property(\"type\");\n            pm.expect(jsonResponse).to.have.property(\"description\");\n        }\n    }\n});\n"
          }
        } ]
      } ]
    } ]
  } ],
  "variable" : [ {
    "key" : "baseUrl",
    "value" : "http://localhost:8084"
  } ]
}